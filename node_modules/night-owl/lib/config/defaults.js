/**
 * @typedef {function} Transform
 * @param {string|Buffer} content The contents of the file
 * @param {string} filename The name of the file
 * @returns {string} The transformed file content
 */

/**
 * @typedef {object} CopyRule
 * @property {string} src The directory from which to copy files
 * @property {string} [dist] The directory where files are copied to
 * @property {string} [include] A glob pattern specifying files to include. If
 * not defined, all files are included
 * @property {string} [exclude] A glob pattern specifying files to exclude
 * @property {boolean} [flatten] Copy all files to the root of the
 * specified `dist` directory
 * @property {boolean} [buffer] Transform the file as a Buffer
 * @property {true|Transform|Transform[]} [transform] Rules to transform the
 * file. When set to `true`, uses the configuration `transform` functions.
 */

/**
 * @typedef {object} CompiledTemplate
 * @param {string} [content] The compiled content of the template
 * @param {string} [render] The method to render the template
 * @param {object} [data] Template data to pass to the render method
 */

/**
 * @typedef {function} CompileFunction
 * @param {string|Buffer} content The contents of the file, without front-matter
 * @param {string} filename The name of the file
 * @param {object} options Compiler options
 * @param {string} options.rawContent Original file content
 * @returns {CompiledTemplate} The transformed file content
 */

/**
 * @typedef {object} Compiler
 * @property {CompileFunction} compile Function to compile the template
 * @property {object} options Options to pass to the compiler
 * @property {string[]} ext File extensions
 */

/**
 * @typedef {object} Compilers
 * @property {Compiler} [templatejs]
 * @property {Compiler} [clientjs]
 * @property {Compiler} [sass]
 * @property {Compiler} [markdown]
 * @property {Compiler} [yaml]
 * @property {Compiler} [json]
 * @property {Compiler} [pug]
 */

/**
 * @typedef {object} Config
 * @property {string} [src] The source directory
 * @property {string} [dist] The destination directory
 * @property {number} [port] The port to use when serving content
 * @property {number} [host] The host to use when serving content
 * @property {string} [data] A path to a global data file
 * @property {object} [templates] Rules to include and exclude template files
 * @property {string[]} [templates.include]
 * @property {string[]} [templates.exclude]
 * @property {CopyRule[]} [copy] Rules to copy assets
 * @property {string[]} [watch] Files to watch outside of `src`
 * @property {string[]} [watchAndRestart] Files which restart Night Owl
 * @property {Transform|Transform[]} [transform] Transform generated files
 * @property {boolean} [trailingSlash] Append a trailing slash to page URLs
 * @property {boolean} [excludeHidden] Don't render pages where `hide` is true
 * @property {boolean} [clear] Empty the `dist` directory before building
 * @property {Compilers} [compilers] Settings for template compilers
 * @property {boolean} [stripSortPrefix] Remove leading numbers from URLs
 * @property {number} [importThreshold] Maximum number of cache-busted imports
 * @property {number} [maxLayoutDepth] Maximum number of nested layouts
 * @property {string} [tempDirectory] Location where temporary files are saved
 * @property {object} [logger] Toggle logged statements
 * @property {object} [logger.fail] Enable error logs
 * @property {object} [logger.warn] Enable warning logs
 * @property {object} [logger.info] Enable normal logs
 * @property {object} [logger.time] Enable timing logs
 */

export default {
  src: "src",
  dist: "dist",
  host: "0.0.0.0",
  port: 8080,
  data: undefined,
  templates: {
    include: [],
    exclude: ["**/_*", "**/.*", "**/_*/**"],
  },
  copy: [],
  watch: [],
  watchAndRestart: ["package.json"],
  transform: [],
  trailingSlash: true,
  excludeHidden: true,
  clear: false,
  compilers: {
    templatejs: {
      ext: [".template.js", ".template.ts"],
    },
    clientjs: {
      ext: [".client.js", ".client.ts"],
    },
    css: {
      ext: [".css"],
    },
    sass: {
      ext: [".sass", ".scss"],
    },
    markdown: {
      ext: [".md"],
    },
    yaml: {
      ext: [".yaml", ".yml"],
    },
    json: {
      ext: [".json"],
    },
    pug: {
      ext: [".pug"],
    },
    handlebars: {
      ext: [".hbs", ".handlebars"],
    },
  },
  stripSortPrefix: true,
  importThreshold: 9999,
  maxLayoutDepth: 10,
  tempDirectory: ".nightowl",
  logger: {
    fail: true,
    info: true,
    time: false,
    warn: true,
  },
}
