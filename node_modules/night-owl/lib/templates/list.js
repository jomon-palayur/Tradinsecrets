import { warn } from "../utils/logger.js"

import { append, sortPages } from "./collections.js"
import appendIndexes from "./indexes.js"

import Cache from "../utils/cache.js"

export default (templates) => {
  const templateCache = new Cache()

  templates.forEach((template) =>
    templateCache.set(template.filename, template)
  )

  return {
    remove: (filename) => {
      templateCache.delete(filename)
    },

    update: (template) => {
      if (!template) return

      templateCache.set(template.filename, template)

      return template
    },

    changed: (filename, content) => {
      return templateCache.changed(filename, { content })
    },

    list: () => {
      return Array.from(templateCache.values())
    },

    pages: () => {
      const pages = new Map()

      const collections = {}
      const indexes = []

      Array.from(templateCache.values(), (template) => {
        // Hi-jack the map to avoid multiple iterations
        if (template.index) indexes.push(template.index)

        return template.pages
      })
        .flat()
        .sort(sortPages)
        .forEach((page) => {
          if (pages.has(page.meta.dist)) {
            warn(
              `${page.meta.dist} is written multiple times`,
              `Ignoring page created by ${page.meta.src}}`
            )
            return
          }

          append(page, collections)
          page.meta.collections = collections

          pages.set(page.meta.dist, page)
        })

      // Indexes cannot be processed until collections are ready
      appendIndexes(indexes, pages, collections)

      return Array.from(pages.values())
    },
  }
}
