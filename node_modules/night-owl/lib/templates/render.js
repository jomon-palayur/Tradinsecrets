import config from "../config/index.js"
import { time, fail } from "../utils/logger.js"
import { write } from "../utils/fs.js"

import chunk from "../utils/chunk.js"

const chunkSize = 100

const renderPage = async ({ meta, render, data }) => {
  let content

  try {
    content = render({
      ...data,
      meta,
    })

    for (const transform of config.transform) {
      content = await transform(content, meta.dist)
    }

    return write(meta.dist, content)
  } catch (error) {
    fail(`Failed to render ${meta.src} to ${meta.dist}`, error)
  }
}

export default async (templates) => {
  const pages = await time("Get pages", templates.pages)

  return time(`Render ${pages.length} pages`, async () => {
    const queue = chunk(pages, chunkSize)

    for (const list of queue) {
      await Promise.all(list.map((page) => renderPage(page))).catch((error) =>
        fail("Failed to render templates", error)
      )
    }
  })
}
