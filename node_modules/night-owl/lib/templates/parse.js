import { warn } from "../utils/logger.js"

const parseTags = (tags, src) => {
  if (!Array.isArray(tags)) {
    if (typeof tags === "string") return [tags]
    return
  }

  return tags.filter((tag) => {
    if (typeof tag !== "string") {
      warn(
        `Ignoring tag for page ${src}`,
        `Expected tag to be string, but got ${typeof tag}`
      )
      return false
    }

    return true
  })
}

export const parseData = (data, src) => {
  if (data.meta) {
    warn(
      `${src} includes \`meta\` data`,
      `This will be overwritten by Night Owl`
    )
    delete data.meta
  }

  if (data.content) {
    data.content = data.content.toString()
  }

  data.tags = parseTags(data.tags, src)

  return data
}

const indexRules = [
  ["list", (val) => Array.isArray(val)],
  ["glob", (val) => typeof val === "string"],
  ["size", (val) => Number.isInteger(val) && val > 0],
  ["filter", (val) => typeof val === "function"],
  ["slug", (val) => typeof val === "function" || typeof val === "string"],
]

export const parseIndex = (data, src) => {
  const index = { slug: "page", size: Infinity }

  index.tags = parseTags(data.tags, src)

  indexRules.forEach(([key, fn]) => {
    if (data[key] !== undefined) {
      if (fn(data[key])) {
        index[key] = data[key]
      } else {
        warn(`${src} includes invalid \`index.${key}\` data`)
      }
    }
  })
  return index
}
