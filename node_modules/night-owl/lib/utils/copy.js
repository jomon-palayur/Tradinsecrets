import fs from "node:fs/promises"
import path from "node:path"
import minimatch from "minimatch"

import config from "../config/index.js"

import { mkdir, write } from "./fs.js"
import { warn } from "./logger.js"

export default async (filename) => {
  const urls = []
  const file = path.relative(process.cwd(), filename)

  for (const rule of config.copy) {
    const src = path.relative(process.cwd(), rule.src)
    const rel = path.relative(src, file)

    if (
      file.startsWith(src) &&
      (!rule.include || minimatch(rel, rule.include)) &&
      (!rule.exclude || !minimatch(rel, rule.exclude))
    ) {
      // The relative path is an empty string when `src` is a file
      const basename = rule.flatten
        ? path.basename(file)
        : path.join(path.dirname(rel), path.basename(file))

      // If the destination has a file extension, use the path as is
      const dist = path.extname(rule.dist)
        ? rule.dist
        : path.join(rule.dist, basename)

      const url = path.relative(config.dist, dist)

      if (urls.includes(url)) {
        warn(`${file} is copied to ${dist} multiple times`)
      } else {
        urls.push(url)
      }

      await mkdir(path.dirname(dist))

      if (rule.transform.length === 0) {
        await fs.copyFile(file, dist)
      } else {
        let content = await fs.readFile(file)

        if (!rule.buffer) content = content.toString()

        for (const transform of rule.transform) {
          content = await transform(content, dist)
        }

        write(dist, content)
      }
    }
  }

  return urls
}
