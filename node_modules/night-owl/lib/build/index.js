import fs from "node:fs/promises"
import path from "node:path"

import config from "../config/index.js"
import { fail, info, time, warn } from "../utils/logger.js"
import copy from "../utils/copy.js"
import compile from "../templates/compile.js"
import render from "../templates/render.js"
import list from "../templates/list.js"
import { exists } from "../utils/fs.js"

export const getFiles = async function (dir, result = []) {
  const list = await fs.readdir(dir, { withFileTypes: true })

  for (const item of list) {
    let child = path.resolve(dir, item.name)

    if (item.isDirectory()) {
      await getFiles(child, result)
    } else if (item.isSymbolicLink()) {
      const link = path.join(dir, await fs.readlink(child))

      if (!(await exists(link))) {
        warn(`The symbolic link "${link}" does not exist`)
      } else {
        const list = await fs.readdir(link, { withFileTypes: true })

        list.forEach((item) => {
          if (item.isDirectory()) {
            getFiles(path.join(child, item.name), result)
          } else {
            result.push(path.join(child, item.name))
          }
        })
      }
    } else {
      result.push(child)
    }
  }

  return result
}

export default async () =>
  time("Build", async () => {
    if (config.clear && (await exists(config.dist))) {
      info(`Clearing ${config.dist}`)
      await fs.rm(config.dist, { recursive: true })
    }

    if (!(await exists(config.src))) {
      warn(
        `The "${config.src}" directory does not exist`,
        `Use nightowl.js to set a different \`src\` directory`
      )
      return
    }

    await time("Copy", async () => {
      const files = await Promise.all(
        config.copy.map(async (rule) => {
          return await fs
            .stat(rule.src)
            .then((stats) =>
              stats.isDirectory() ? getFiles(rule.src) : path.resolve(rule.src)
            )
        })
      ).then((res) => new Set(res.flat()))

      for (const file of files) {
        await copy(file).catch((error) => {
          fail(`Failed to copy ${file}`, error)
        })
      }
    })

    const compiled = []

    await time("Compile", async () => {
      const files = await getFiles(config.src)
      const toCompile = files
        .map((file) => path.relative(".", file))
        .filter((file) => config.isTemplate(file))

      for (const file of toCompile) {
        const template = await compile(file)
        if (template) compiled.push(template)
      }
    })

    const templates = list(compiled)

    await render(templates)

    return templates
  })
