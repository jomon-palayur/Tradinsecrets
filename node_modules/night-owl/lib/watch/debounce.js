// Delay function invocations until the `duration` has elapsed.
// Use `leading = true` to avoid waiting for the initial call.
export default (fn, duration = 0, leading = false) => {
  let timeout
  let initial = leading

  return (...args) =>
    new Promise((resolve, reject) => {
      if (initial) {
        initial = false
        Promise.resolve(fn(...args))
          .then(resolve)
          .catch(reject)
      } else {
        if (timeout) clearTimeout(timeout)

        timeout = setTimeout(() => {
          initial = leading
          Promise.resolve(fn(...args))
            .then(resolve)
            .catch(reject)
        }, duration)
      }
    })
}
