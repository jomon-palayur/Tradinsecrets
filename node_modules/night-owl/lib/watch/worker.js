import { Worker, parentPort } from "node:worker_threads"
import { fail } from "../utils/logger.js"

// Messages passed between the parent and worker thread.
const RESET = "RESET"
const CLOSE = "CLOSE"
const READY = "READY"

// Creates a new worker thread, listening to specific messages from the parent.
// When the worker recieves a RESET message, it posts back a CLOSE message,
// which triggers the callback registered by `beforeClose`. Once finished, the
// worker recieves a READY message, it terminates, and a new thread is created.
export const createWorker = (url) => {
  const worker = new Worker(url, {
    argv: process.argv,
    name: "NightOwlWorker",
  })

  worker.on("message", (msg) => {
    if (msg === RESET) {
      worker.postMessage(CLOSE)
    }

    if (msg === READY) {
      worker.terminate().then(() => createWorker(url))
    }
  })

  worker.on("error", (error) => {
    fail("An unhandled exception has occurred", error)
  })
}

// When the CLOSE message is received, run the cleanup method first.
export const beforeClose = (cleanup) => {
  let closing = false
  parentPort.on("message", (msg) => {
    if (msg === CLOSE && !closing) {
      closing = true
      cleanup().then(() => setTimeout(() => parentPort.postMessage(READY), 0))
    }
  })
}

// Post the the RESET message to start a new worker thread.
export const restart = () => {
  parentPort.postMessage(RESET)
}
