const log = (msg) => {
  console.log(`[night-owl] %c${msg}`, "font-weight: bold")
}

function* qs(selector, root = document) {
  for (const link of root.querySelectorAll(selector)) {
    yield link
  }

  for (const element of root.querySelectorAll("*")) {
    if (element.shadowRoot) {
      yield* qs(selector, element.shadowRoot)
    }
  }
}

const reload = (el, attr, asset) => {
  const url = new URL(el.getAttribute(attr), location.origin)

  if (url.href.includes(asset)) {
    log(`Reloading ${asset}`)
    url.searchParams.set("reload", Date.now().toString(36))
    el.setAttribute(attr, url.href)
  }
}

let delay = 1500
let disconnected = false

const onOpen = () => {
  if (disconnected) {
    location.reload()
  } else {
    log("Listening for reload...")
  }
}

const onClose = () => {
  if (delay > 1000 * 60 * 60) {
    log("Server disconnected. Please reload the page.")
    return
  }

  setTimeout(() => {
    createSocket(delay * 1.25)
  }, delay)
}

const onMessage = (event) => {
  if (event.data === "page") {
    location.reload()
  }

  if (event.data.startsWith("assets")) {
    const links = qs("link[href]")
    const images = qs("img[src]")

    event.data
      .slice("assets.".length)
      .split(",")
      .forEach((url) => {
        for (const el of links) {
          reload(el, "href", url)
        }

        for (const el of images) {
          reload(el, "src", url)
        }
      })
  }

  if (event.data === "close") {
    log("Server restarting...")
    disconnected = true

    event.target.removeEventListener("open", onOpen)
    event.target.removeEventListener("close", onClose)
    event.target.removeEventListener("message", onMessage)

    event.target.close()
    createSocket(delay)
  }
}

const createSocket = () => {
  const socket = new WebSocket(SOCKET_ADDRESS)

  socket.addEventListener("open", onOpen)
  socket.addEventListener("close", onClose)
  socket.addEventListener("message", onMessage)
}

createSocket()
